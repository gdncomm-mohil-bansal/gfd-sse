package com.gfd_sse.dummyoff2onredis.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class OTPService {

    private static final Logger logger = LoggerFactory.getLogger(OTPService.class);

    private final RedisTemplate<String, Object> redisTemplate;

    // Redis key prefix for OTPs (must match dummy-off2on)
    private static final String OTP_PREFIX = "otp:";
    private static final String OTP_USER_PREFIX = "otp:user:";

    public OTPService(RedisTemplate<String, Object> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    /**
     * Validate OTP from Redis (OTP was generated by dummy-off2on)
     * Returns the userId if OTP is valid, null otherwise
     */
    public String validateAndGetUserId(String otp) {
        logger.info("Validating OTP from Redis: {}", otp);

        try {
            // Get userId associated with this OTP from Redis
            String userId = (String) redisTemplate.opsForValue().get(OTP_PREFIX + otp);

            if (userId == null) {
                logger.warn("OTP not found or expired in Redis: {}", otp);
                return null;
            }

            logger.info("OTP validated successfully. UserId: {}", userId);
            return userId;

        } catch (Exception e) {
            logger.error("Error validating OTP from Redis", e);
            return null;
        }
    }

    /**
     * Validate OTP and check if it matches expected userId
     */
    public boolean validateOTP(String otp, String expectedUserId) {
        String actualUserId = validateAndGetUserId(otp);

        if (actualUserId == null) {
            return false;
        }

        if (!actualUserId.equals(expectedUserId)) {
            logger.warn("User ID mismatch. Expected: {}, Actual: {}", expectedUserId, actualUserId);
            return false;
        }

        return true;
    }

    /**
     * Invalidate OTP after successful SSE connection (one-time use)
     * Deletes OTP from Redis
     */
    public void invalidateOTP(String otp) {
        logger.info("Invalidating OTP in Redis: {}", otp);

        try {
            // Get userId before deleting
            String userId = (String) redisTemplate.opsForValue().get(OTP_PREFIX + otp);

            // Delete both mappings
            redisTemplate.delete(OTP_PREFIX + otp);
            if (userId != null) {
                redisTemplate.delete(OTP_USER_PREFIX + userId);
            }

            logger.info("OTP invalidated successfully: {}", otp);
        } catch (Exception e) {
            logger.error("Error invalidating OTP in Redis", e);
        }
    }

    /**
     * Check if OTP exists in Redis
     */
    public boolean otpExists(String otp) {
        return Boolean.TRUE.equals(redisTemplate.hasKey(OTP_PREFIX + otp));
    }
}
